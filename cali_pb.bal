import ballerina/grpc;

public type caliBlockingClient client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "blocking", ROOT_DESCRIPTOR, getDescriptorMap());
    }

    public remote function saveRecord(writeNewRecord req, grpc:Headers? headers = ()) returns ([writeNewRecord, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/saveRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<writeNewRecord>result, resHeaders];
        
    }

    public remote function changeRecord(updateRecord req, grpc:Headers? headers = ()) returns ([updateRecord, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/changeRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<updateRecord>result, resHeaders];
        
    }

    public remote function displayRecord(readRecord req, grpc:Headers? headers = ()) returns ([readRecord, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/displayRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<readRecord>result, resHeaders];
        
    }

};

public type caliClient client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "non-blocking", ROOT_DESCRIPTOR, getDescriptorMap());
    }

    public remote function saveRecord(writeNewRecord req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/saveRecord", req, msgListener, headers);
    }

    public remote function changeRecord(updateRecord req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/changeRecord", req, msgListener, headers);
    }

    public remote function displayRecord(readRecord req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/displayRecord", req, msgListener, headers);
    }

};

public type Band record {|
    string band_ = "";
    
|};


public type Songs record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};


public type Date record {|
    string day = "";
    string month = "";
    string year = "";
    
|};


public type writeNewRecord record {|
    Record[] 'record = [];
    
|};


public type updateRecord record {|
    string id = "";
    writeNewRecord? 'version = ();
    
|};


public type readRecord record {|
    string id = "";
    Record? 'record = ();
    string creterion = "";
    
|};


public type Record record {|
    string Id = "";
    Date? date = ();
    string name = "";
    string member = "";
    Band? band = ();
    Songs? songs = ();
    
|};



const string ROOT_DESCRIPTOR = "0A0A63616C692E70726F746F1A1E676F6F676C652F70726F746F6275662F77726170706572732E70726F746F221B0A0442616E6412130A0562616E645F180120022809520462616E64224F0A05536F6E677312140A057469746C6518012002280952057469746C6512140A0567656E7265180220022809520567656E7265121A0A08706C6174666F726D1803200228095208706C6174666F726D22420A044461746512100A03646179180120022809520364617912140A056D6F6E746818022002280952056D6F6E746812120A047965617218032002280952047965617222310A0E77726974654E65775265636F7264121F0A067265636F726418012003280B32072E5265636F726452067265636F726422490A0C7570646174655265636F7264120E0A0269641801200228095202696412290A0776657273696F6E18022002280B320F2E77726974654E65775265636F7264520776657273696F6E225B0A0A726561645265636F7264120E0A02696418012001280952026964121F0A067265636F726418022001280B32072E5265636F726452067265636F7264121C0A09637265746572696F6E1803200128095209637265746572696F6E2298010A065265636F7264120E0A0249641801200228095202496412190A046461746518022001280B32052E4461746552046461746512120A046E616D6518032002280952046E616D6512160A066D656D62657218042002280952066D656D62657212190A0462616E6418052002280B32052E42616E64520462616E64121C0A05736F6E677318062002280B32062E536F6E67735205736F6E6773328F010A0463616C69122E0A0A736176655265636F7264120F2E77726974654E65775265636F72641A0F2E77726974654E65775265636F7264122C0A0C6368616E67655265636F7264120D2E7570646174655265636F72641A0D2E7570646174655265636F726412290A0D646973706C61795265636F7264120B2E726561645265636F72641A0B2E726561645265636F7264";
function getDescriptorMap() returns map<string> {
    return {
        "cali.proto
        "google/protobuf/wrappers.proto
        
    };
}

