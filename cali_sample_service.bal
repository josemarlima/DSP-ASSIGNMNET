//Cali Server

import ballerina/grpc;
import  ballerina/log;


//grpc services endpoint defeiniton 
listener grpc:Listener ep = new (9090);

//Cali Storage system is done using an in memory map
//Add some record to the 'writeRecord' at startup
map<Record> caliStoragMap = {};

//Cali Grpc Service
service cali on ep {

    //grpc method to write record from map
    resource function saveRecord(grpc:Caller caller, writeNewRecord value) 
    {
        //add or save record to the map
        string recordId = recordReq.id;
        caliStoragMap[recordReq.id] = recordReq;

        //create a response to the map
        string payload = "Status: Record added; recordID: "+recordId;

        //send response to the caller
        error? result = caller->send(payload);
        result = caller ->complete();
        if (result is error) 
        {
            log:printError("Error from connector: "+result.reason()+" - "+ <string>result.detail()["message"]+"\n");    
        }

        // You should return a writeNewRecord
    }

    //grpc method to update an existing record
    resource function changeRecord(grpc:Caller caller, updateRecord value) 
    {
        string payload;
        error? result =();
        
        //find the record that needs to be updated 
        string recordId = updateRec.id;
        if (caliStoragMap.hasKey(recordId))
        {
            //update the existing record
            caliStoragMap[recordId] = updateRec;
            payload = "Record : "+recordId+" Updated.";
            //send reponse to the caller 
            result = caller->send(payload);
            result caller->complete();

        } 
        else
        {
            //send record not found error if key doesnt match record
           payload = "Record : "+recordId+"Record does not exist.";
           result = caller->sendError(grpc::NOT_FOUND,payload);
        }
        if(result is error)
        {
            log:printError("Error from connector:" result.reason()+ " - " + <string>result.details()["mesaage"]+"\n");
        }

      
    }
     //grpc method to read an existing record 
    resource function displayRecord(grpc:Caller caller, readRecord value) 
    {
        string payload = "";
        error? result = ();
        //find the requested record from the map
        if(caliStoragMap.hasKey(recordId))
        {
            var jsonValue = typedes<json>.construtFrom(caliStoragMap[recordId]);
            if (jsonValue is error)
            {
                //send casting error as internal error
                result =caller ->sendError(grpc:INTERNAL, <string> jsonValue.details(["message"]))
            }

        }
    }
}

public type Band record {|
    string band_ = "";
    
|};

public type Songs record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};

public type Date record {|
    string day = "";
    string month = "";
    string year = "";
    
|};

public type writeNewRecord record {|
    Record[] 'record = [];
    
|};

public type updateRecord record {|
    string id = "";
    writeNewRecord? 'version = ();
    
|};

public type readRecord record {|
    string id = "";
    Record? 'record = ();
    string creterion = "";
    
|};

public type Record record {|
    string Id = "";
    Date? date = ();
    string name = "";
    string member = "";
    Band? band = ();
    Songs? songs = ();
    
|};



const string ROOT_DESCRIPTOR = "0A0A63616C692E70726F746F1A1E676F6F676C652F70726F746F6275662F77726170706572732E70726F746F221B0A0442616E6412130A0562616E645F180120022809520462616E64224F0A05536F6E677312140A057469746C6518012002280952057469746C6512140A0567656E7265180220022809520567656E7265121A0A08706C6174666F726D1803200228095208706C6174666F726D22420A044461746512100A03646179180120022809520364617912140A056D6F6E746818022002280952056D6F6E746812120A047965617218032002280952047965617222310A0E77726974654E65775265636F7264121F0A067265636F726418012003280B32072E5265636F726452067265636F726422490A0C7570646174655265636F7264120E0A0269641801200228095202696412290A0776657273696F6E18022002280B320F2E77726974654E65775265636F7264520776657273696F6E225B0A0A726561645265636F7264120E0A02696418012001280952026964121F0A067265636F726418022001280B32072E5265636F726452067265636F7264121C0A09637265746572696F6E1803200128095209637265746572696F6E2298010A065265636F7264120E0A0249641801200228095202496412190A046461746518022001280B32052E4461746552046461746512120A046E616D6518032002280952046E616D6512160A066D656D62657218042002280952066D656D62657212190A0462616E6418052002280B32052E42616E64520462616E64121C0A05736F6E677318062002280B32062E536F6E67735205736F6E6773328F010A0463616C69122E0A0A736176655265636F7264120F2E77726974654E65775265636F72641A0F2E77726974654E65775265636F7264122C0A0C6368616E67655265636F7264120D2E7570646174655265636F72641A0D2E7570646174655265636F726412290A0D646973706C61795265636F7264120B2E726561645265636F72641A0B2E726561645265636F7264";
function getDescriptorMap() returns map<string> {
    return {
        "cali.proto
        "google/protobuf/wrappers.proto
        
    };
}

